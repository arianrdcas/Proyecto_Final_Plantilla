{"ast":null,"code":"const getState = _ref => {\n  let {\n    getStore,\n    getActions,\n    setStore\n  } = _ref;\n  return {\n    store: {\n      nombre: \"\",\n      email: \"\",\n      password: \"\",\n      erro: null,\n      isAuth: false,\n      proyecto: \"\",\n      descripcion: \"\",\n      autor: \"\",\n      currentUser: [],\n      profile: null\n    },\n    actions: {\n      isAuthenticated: () => {\n        //console.log(\"verificanco usuario\");\n        if (sessionStorage.getItem(\"isAuth\")) {\n          setStore({\n            isAuth: sessionStorage.getItem(\"isAuth\"),\n            currentUser: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n          });\n        }\n      },\n      register: dataUser => {\n        //datos\n        //console.log(dataUser)\n        fetch(\"http://127.0.0.1:5000/api/register\", {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(dataUser) //datos\n\n        }).then(resp => resp.json()).then(response => console.log(response)).catch(error => console.error(error));\n      },\n      handleChange: e => {\n        setStore({\n          [e.target.name]: e.target.value\n        });\n      },\n      handleLogin: async e => {\n        e.preventDefault();\n        const {\n          nombre,\n          password\n        } = getStore();\n        const datos = {\n          nombre: nombre,\n          password: password\n        };\n        console.log(datos);\n        const resp = await fetch(\"http://127.0.0.1:5000/api/login\", {\n          method: \"POST\",\n          body: JSON.stringify(datos),\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"sources":["D:/ProyectosArian/Trabajo_Final_agosto/frontend/src/store/flux.js"],"names":["getState","getStore","getActions","setStore","store","nombre","email","password","erro","isAuth","proyecto","descripcion","autor","currentUser","profile","actions","isAuthenticated","sessionStorage","getItem","JSON","parse","register","dataUser","fetch","method","headers","body","stringify","then","resp","json","response","console","log","catch","error","handleChange","e","target","name","value","handleLogin","preventDefault","datos"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,QAAwC;AAAA,MAAvC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,UAAZ;AAAwBC,IAAAA;AAAxB,GAAuC;AACvD,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,EADH;AAELC,MAAAA,KAAK,EAAE,EAFF;AAGLC,MAAAA,QAAQ,EAAE,EAHL;AAILC,MAAAA,IAAI,EAAE,IAJD;AAKLC,MAAAA,MAAM,EAAE,KALH;AAMLC,MAAAA,QAAQ,EAAE,EANL;AAOLC,MAAAA,WAAW,EAAE,EAPR;AAQLC,MAAAA,KAAK,EAAE,EARF;AASLC,MAAAA,WAAW,EAAE,EATR;AAULC,MAAAA,OAAO,EAAE;AAVJ,KADF;AAcLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,eAAe,EAAE,MAAM;AACrB;AACA,YAAIC,cAAc,CAACC,OAAf,CAAuB,QAAvB,CAAJ,EAAsC;AACpCf,UAAAA,QAAQ,CAAC;AACPM,YAAAA,MAAM,EAAEQ,cAAc,CAACC,OAAf,CAAuB,QAAvB,CADD;AAEPL,YAAAA,WAAW,EAAEM,IAAI,CAACC,KAAL,CAAWH,cAAc,CAACC,OAAf,CAAuB,aAAvB,CAAX;AAFN,WAAD,CAAR;AAID;AACF,OATM;AAWPG,MAAAA,QAAQ,EAAGC,QAAD,IAAc;AACtB;AACA;AACAC,QAAAA,KAAK,CAAC,oCAAD,EAAuC;AAC1CC,UAAAA,MAAM,EAAE,MADkC;AAE1CC,UAAAA,OAAO,EAAE;AAAE,4BAAgB;AAAlB,WAFiC;AAG1CC,UAAAA,IAAI,EAAEP,IAAI,CAACQ,SAAL,CAAeL,QAAf,CAHoC,CAGV;;AAHU,SAAvC,CAAL,CAKGM,IALH,CAKSC,IAAD,IAAUA,IAAI,CAACC,IAAL,EALlB,EAMGF,IANH,CAMSG,QAAD,IAAcC,OAAO,CAACC,GAAR,CAAYF,QAAZ,CANtB,EAOGG,KAPH,CAOUC,KAAD,IAAWH,OAAO,CAACG,KAAR,CAAcA,KAAd,CAPpB;AAQD,OAtBM;AAwBPC,MAAAA,YAAY,EAAGC,CAAD,IAAO;AACnBlC,QAAAA,QAAQ,CAAC;AACP,WAACkC,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AADnB,SAAD,CAAR;AAGD,OA5BM;AA8BPC,MAAAA,WAAW,EAAE,MAAOJ,CAAP,IAAa;AACxBA,QAAAA,CAAC,CAACK,cAAF;AAEA,cAAM;AAAErC,UAAAA,MAAF;AAAUE,UAAAA;AAAV,YAAuBN,QAAQ,EAArC;AACA,cAAM0C,KAAK,GAAG;AAAEtC,UAAAA,MAAM,EAAEA,MAAV;AAAkBE,UAAAA,QAAQ,EAAEA;AAA5B,SAAd;AACAyB,QAAAA,OAAO,CAACC,GAAR,CAAYU,KAAZ;AACA,cAAMd,IAAI,GAAG,MAAMN,KAAK,CAAC,iCAAD,EAAoC;AAC1DC,UAAAA,MAAM,EAAE,MADkD;AAE1DE,UAAAA,IAAI,EAAEP,IAAI,CAACQ,SAAL,CAAegB,KAAf,CAFoD;AAG1DlB,UAAAA,OAAO,EAAE;AACP,4BAAgB;AADT;AAHiD,SAApC,CAAxB;AAOD;AA3CM;AAdJ,GAAP;AA4DD,CA7DD;;AA+DA,eAAezB,QAAf","sourcesContent":["const getState = ({ getStore, getActions, setStore }) => {\r\n  return {\r\n    store: {\r\n      nombre: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      erro: null,\r\n      isAuth: false,\r\n      proyecto: \"\",\r\n      descripcion: \"\",\r\n      autor: \"\",\r\n      currentUser: [],\r\n      profile: null,\r\n    },\r\n\r\n    actions: {\r\n      isAuthenticated: () => {\r\n        //console.log(\"verificanco usuario\");\r\n        if (sessionStorage.getItem(\"isAuth\")) {\r\n          setStore({\r\n            isAuth: sessionStorage.getItem(\"isAuth\"),\r\n            currentUser: JSON.parse(sessionStorage.getItem(\"currentUser\")),\r\n          });\r\n        }\r\n      },\r\n\r\n      register: (dataUser) => {\r\n        //datos\r\n        //console.log(dataUser)\r\n        fetch(\"http://127.0.0.1:5000/api/register\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-type\": \"application/json\" },\r\n          body: JSON.stringify(dataUser), //datos\r\n        })\r\n          .then((resp) => resp.json())\r\n          .then((response) => console.log(response))\r\n          .catch((error) => console.error(error));\r\n      },\r\n\r\n      handleChange: (e) => {\r\n        setStore({\r\n          [e.target.name]: e.target.value,\r\n        });\r\n      },\r\n\r\n      handleLogin: async (e) => {\r\n        e.preventDefault();\r\n        \r\n        const { nombre, password } = getStore();\r\n        const datos = { nombre: nombre, password: password };\r\n        console.log(datos)\r\n        const resp = await fetch(\"http://127.0.0.1:5000/api/login\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify(datos),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n        });\r\n      },\r\n    },\r\n  };\r\n};\r\n\r\nexport default getState;\r\n"]},"metadata":{},"sourceType":"module"}