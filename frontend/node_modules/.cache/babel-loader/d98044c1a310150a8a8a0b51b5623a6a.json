{"ast":null,"code":"const getState = _ref => {\n  let {\n    getStore,\n    getActions,\n    setStore\n  } = _ref;\n  return {\n    store: {\n      name: \"\",\n      emailuser: \"\",\n      password: \"\",\n      error: null,\n      isAuth: false,\n      nombre: \"\",\n      descripcion: \"\",\n      autor: \"\",\n      currentUser: [],\n      profile: null,\n      proyectos: []\n    },\n    actions: {\n      isAuthenticated: () => {\n        //console.log(\"verificanco usuario\");\n        if (sessionStorage.getItem(\"isAuth\")) {\n          setStore({\n            isAuth: sessionStorage.getItem(\"isAuth\"),\n            currentUser: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n          });\n        }\n      },\n      register: e => {\n        e.preventDefault();\n        const {\n          name,\n          emailuser,\n          password\n        } = getStore();\n        const dataUser = {\n          name: name,\n          emailuser: emailuser,\n          password: password\n        };\n        console.log(dataUser);\n        fetch(\"http://127.0.0.1:5000/api/users/register\", {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(dataUser)\n        }).then(resp => resp.json()).then(response => console.log(response)).catch(error => console.error(error));\n      },\n      handleChange: e => {\n        setStore({\n          [e.target.name]: e.target.value\n        });\n      },\n      handleLogin: async e => {\n        e.preventDefault();\n\n        try {\n          const {\n            name,\n            password\n          } = getStore();\n          const datos = {\n            name: name,\n            password: password\n          };\n          console.log(datos);\n          const resp = await fetch(\"http://127.0.0.1:5000/api/users/login\", {\n            method: \"POST\",\n            body: JSON.stringify(datos),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          const infoUser = await resp.json();\n\n          if (infoUser.msg) {\n            setStore({\n              password: \"\",\n              error: infoUser.msg\n            });\n          } else {\n            setStore({\n              nombre: \"\",\n              password: \"\",\n              error: null,\n              currentUser: infoUser,\n              isAuth: true\n            });\n            sessionStorage.setItem(\"isAuth\", true);\n            sessionStorage.setItem(\"currentUser\", JSON.stringify(infoUser)); //history.push(\"/\");\n          }\n        } catch (error) {\n          setStore({\n            error: error.message\n          });\n        }\n      },\n      sendForm: e => {\n        e.preventDefault();\n        const {\n          nombre,\n          descripcion,\n          autor\n        } = getStore();\n        const dataForm = {\n          nombre: nombre,\n          descripcion: descripcion,\n          autor: autor\n        };\n        console.log(dataForm);\n        fetch(\"http://127.0.0.1:5000/api/proyectos/register\", {\n          method: \"POST\",\n          body: JSON.stringify(dataForm),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        }).then(resp => resp.json()).then(response => console.log(response)).catch(error => console.error(error));\n      },\n      fetchProyecto: e => {\n        fetch(\"http://127.0.0.1:5000/api/proyectos\").then(resp => resp.json()).then(response => {\n          proyectos(response);\n        });\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"sources":["D:/ProyectosArian/Trabajo_Final_agosto/frontend/src/store/flux.js"],"names":["getState","getStore","getActions","setStore","store","name","emailuser","password","error","isAuth","nombre","descripcion","autor","currentUser","profile","proyectos","actions","isAuthenticated","sessionStorage","getItem","JSON","parse","register","e","preventDefault","dataUser","console","log","fetch","method","headers","body","stringify","then","resp","json","response","catch","handleChange","target","value","handleLogin","datos","infoUser","msg","setItem","message","sendForm","dataForm","fetchProyecto"],"mappings":"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","sourcesContent":["const getState = ({ getStore, getActions, setStore }) => {\r\n  return {\r\n    store: {\r\n      name: \"\",\r\n      emailuser: \"\",\r\n      password: \"\",\r\n      error: null,\r\n      isAuth: false,\r\n      nombre: \"\",\r\n      descripcion: \"\",\r\n      autor: \"\",\r\n      currentUser: [],\r\n      profile: null,\r\n      proyectos:[]\r\n    },\r\n\r\n    actions: {\r\n      isAuthenticated: () => {\r\n        //console.log(\"verificanco usuario\");\r\n        if (sessionStorage.getItem(\"isAuth\")) {\r\n          setStore({\r\n            isAuth: sessionStorage.getItem(\"isAuth\"),\r\n            currentUser: JSON.parse(sessionStorage.getItem(\"currentUser\")),\r\n          });\r\n        }\r\n      },\r\n\r\n      register: (e) => {\r\n        e.preventDefault();\r\n        const { name, emailuser, password } = getStore();\r\n        const dataUser = {\r\n          name: name,\r\n          emailuser: emailuser,\r\n          password: password,\r\n        };\r\n        console.log(dataUser);\r\n        fetch(\"http://127.0.0.1:5000/api/users/register\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-type\": \"application/json\" },\r\n          body: JSON.stringify(dataUser),\r\n          \r\n        })\r\n          .then((resp) => resp.json())\r\n          .then((response) => console.log(response))\r\n          .catch((error) => console.error(error));\r\n      },\r\n\r\n      handleChange: (e) => {\r\n        setStore({\r\n          [e.target.name]: e.target.value,\r\n        });\r\n      },\r\n\r\n      handleLogin: async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n          const { name, password } = getStore();\r\n          const datos = { name: name, password: password };\r\n          console.log(datos);\r\n          const resp = await fetch(\"http://127.0.0.1:5000/api/users/login\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(datos),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          });\r\n          const infoUser = await resp.json();\r\n          if (infoUser.msg) {\r\n            setStore({\r\n              password: \"\",\r\n              error: infoUser.msg,\r\n            });\r\n          } else {\r\n            setStore({\r\n              nombre: \"\",\r\n              password: \"\",\r\n              error: null,\r\n              currentUser: infoUser,\r\n              isAuth: true,\r\n            });\r\n            sessionStorage.setItem(\"isAuth\", true);\r\n            sessionStorage.setItem(\"currentUser\", JSON.stringify(infoUser));\r\n            //history.push(\"/\");\r\n          }\r\n        } catch (error) {\r\n          setStore({\r\n            error: error.message,\r\n          });\r\n        }\r\n      },\r\n\r\n      sendForm: (e) => {\r\n        e.preventDefault();\r\n        const { nombre, descripcion, autor } = getStore();\r\n        const dataForm = {\r\n          nombre: nombre,\r\n          descripcion: descripcion,\r\n          autor: autor,\r\n        };\r\n        console.log(dataForm);\r\n        fetch(\"http://127.0.0.1:5000/api/proyectos/register\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify(dataForm),\r\n          headers: { \"Content-type\": \"application/json\" },\r\n        })\r\n          .then((resp) => resp.json())\r\n          .then((response) => console.log(response))\r\n          .catch((error) => console.error(error));\r\n      },\r\n      fetchProyecto: (e) => {\r\n        fetch(\"http://127.0.0.1:5000/api/proyectos\")\r\n            .then((resp) => resp.json())\r\n            .then((response) =>{proyectos(response);});\r\n            \r\n            \r\n      }, \r\n    },\r\n  };\r\n};\r\n\r\nexport default getState;\r\n"]},"metadata":{},"sourceType":"module"}