{"ast":null,"code":"var _jsxFileName = \"D:\\\\ProyectosArian\\\\final-zombiz\\\\src\\\\components\\\\Register.js\";\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EMAIL_REGEX = new RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i); //const Register = () => {\n\nclass Register extends React.Component {\n  /*const [name, setName] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n    const [state, setState] = useState ({\r\n      nombre : '',\r\n      email : '',\r\n      password : '',\r\n      error : null,\r\n      \r\n  })\r\n    const registrarse = async () => {\r\n      let item = {name,password,email}\r\n      let data = await fetch(`http://localhost:5000/register`,{\r\n          'method':'POST',\r\n          headers : {\r\n          'Content-Type':'application/json',\r\n          \"Accept\" :'application/json' \r\n          },\r\n      body:JSON.stringify(item)\r\n      })\r\n      if(data.ok){\r\n          let datos = await data.json();\r\n          console.log(datos)\r\n          localStorage.clear();\r\n          window.location.href = '/';\r\n      }\r\n  }\r\n    const onSubmit = (e) => {\r\n      e.preventDefault ();\r\n      console.log(\"Enviando formulario\");\r\n      let hasError = false\r\n      if(e.target.nombre.value === \"\") { \r\n          setState(prevState => {\r\n              return {\r\n                  ...prevState,\r\n                  error: {\r\n                      ...prevState.error,\r\n                      nombre:{\r\n                          msg : \"Por favor, introduzca su username\",\r\n                      } \r\n                  }\r\n              }    \r\n          })\r\n          hasError = true;\r\n      } else {\r\n          setState(prevState => {\r\n              delete prevState.error?.nombre;\r\n              return {\r\n                  ...prevState, \r\n              }\r\n          })\r\n      } \r\n      if(e.target.email.value === \"\") { \r\n          setState(prevState => {\r\n              return {\r\n                  ...prevState,\r\n                  error: {\r\n                      ...prevState.error,\r\n                      email:{\r\n                          msg : 'Por favor, introduzca su email',\r\n                      } \r\n                  }\r\n              }    \r\n          })\r\n          hasError = true;\r\n      } else {\r\n          setState(prevState => {\r\n              delete prevState.error?.nombre;\r\n              return {\r\n                  ...prevState, \r\n              }\r\n          })\r\n      } \r\n      if (e.target.password.value === \"\") {\r\n          setState(prevState => {\r\n              return {\r\n                  ...prevState,\r\n                  error: {\r\n                      ...prevState.error,\r\n                      password:{\r\n                          msg : 'Por favor, introduzca su password',\r\n                      } \r\n                  }\r\n              }    \r\n          })\r\n          hasError = true;\r\n      } else {\r\n          setState(prevState => {\r\n              delete prevState.error?.password;\r\n              return {\r\n                  ...prevState, \r\n              }\r\n          })\r\n      } \r\n      \r\n      /*if (!hasError == false){ \r\n          console.log(\"tengo error\")\r\n            return;\r\n      }*/\n  //if (hasError) return;\n  //}   \n\n  /*return (  \r\n      <>*/\n\n  /*<div className=\"modal fade bs-example-modal-lg\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"myLargeModalLabel\">\r\n      <div className=\"modal-dialog modal-lg\" role=\"document\">\r\n          <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n              <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              data-dismiss=\"modal\"\r\n              aria-label=\"Close\"\r\n              >\r\n              <span aria-hidden=\"true\">\r\n                  <i className=\"fa fa-close\" />\r\n              </span>\r\n              </button>\r\n              <h4 className=\"modal-title\" id=\"myLargeModalLabel\">\r\n              Registrarse\r\n              </h4>\r\n              <form className=\"lg-frm\" style={{ padding: 25 }} onSubmit={onSubmit}>\r\n              <label>Nombre :</label>\r\n              <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Introduzca su nombre\"\r\n                  name=\"nombre\"\r\n                  //value={state.nombre}\r\n                  onChange={(e) => setName(e.target.value)}\r\n              />\r\n              {!!state.error && state.error.nombre ? state.error.nombre.msg : \"\"}\r\n              <br/>\r\n                <label>Email :</label>\r\n              <input\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Introduzca su email\"\r\n                  name=\"email\"\r\n                  //value={state.email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              {!!state.error && state.error.email ? state.error.email.msg : \"\"}\r\n              <br/>\r\n                <label>Password :</label>\r\n              <input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Introduzca su password\"\r\n                  name=\"password\"\r\n                  ///value={state.password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              {!!state.error && state.error.password ? state.error.password.msg : \"\"}\r\n              <br/>\r\n              \r\n              <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-default pull-right\"\r\n                  type=\"submit\"\r\n                  value=\"Submit\"\r\n                  onClick={registrarse}\r\n              >\r\n                  Enviar\r\n              </button>\r\n              </form>\r\n          </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n  </>\r\n  );*/\n\n  /* constructor() {\r\n       super();\r\n       this.state = {\r\n       name: '',\r\n       email: '',\r\n       password: '',\r\n       touched: {\r\n           name: false,\r\n           email: false,\r\n           password: false\r\n       },\r\n       errors: {\r\n           required: {\r\n           name: false,\r\n           email: false,\r\n           password: false\r\n           },\r\n           valid: {\r\n           email: false,\r\n           name: true,\r\n           password: true\r\n           }\r\n       }\r\n       };\r\n   \r\n       this.handleSubmit = this.handleSubmit.bind(this);\r\n       this.handleChange = this.handleChange.bind(this);\r\n       this.handleBlur = this.handleBlur.bind(this);\r\n   }\r\n     \r\n   handleSubmit(event) {\r\n       event.preventDefault();\r\n   }\r\n     \r\n       handleChange(event) {\r\n         const target = event.target;\r\n         const { value, name } = target;\r\n         const errors = {\r\n           required: { ...this.state.errors.required, [name]: false }\r\n         };\r\n         this.setState({\r\n           [name]: value,\r\n           errors: { ...this.state.errors, ...errors }\r\n         });\r\n       }\r\n     \r\n       handleBlur(event) {\r\n         const field = event.target.name;\r\n         this.setState({\r\n           touched: { ...this.state.touched, [field]: true }\r\n         });\r\n         this.validate(event);\r\n       }\r\n     \r\n       validate(event) {\r\n         const target = event.target;\r\n         const { value, name } = target;\r\n     \r\n         if (value.length === 0) {\r\n           const errors = {\r\n             required: { ...this.state.errors.required, [name]: true }\r\n           };\r\n     \r\n           this.setState({\r\n             errors: { ...this.state.errors, ...errors }\r\n           });\r\n           return;\r\n         }\r\n     \r\n         if (name === 'email') {\r\n           this.validateEmail(value);\r\n         }\r\n       }\r\n     \r\n       validateEmail(email) {\r\n         const emailIsValid = EMAIL_REGEX.test(this.state.email);\r\n         const errors = {\r\n           valid: { ...this.state.errors.valid, email: emailIsValid }\r\n         };\r\n     \r\n         this.setState({\r\n           errors: { ...this.state.errors, ...errors }\r\n         });\r\n       }\r\n     \r\n       hasError(field) {\r\n         return (this.state.errors.required[field] || !this.state.errors.valid[field]) && this.state.touched[field];\r\n       }\r\n     \r\n       isFormInvalid() {\r\n         const { email, name, errors } = this.state;\r\n         const { required, valid } = errors;\r\n         const isSomeFieldRequired = Object.keys(required).some(error => required[error]);\r\n         const isSomeFieldInvalid = Object.keys(valid).some(error => !valid[error]);\r\n     \r\n         return isSomeFieldInvalid || isSomeFieldRequired;\r\n       }\r\n     \r\n       displayError(field) {\r\n         const { required, valid } = this.state.errors;\r\n         const errorMessage = `Field ${field} is `;\r\n     \r\n         if (required[field]) {\r\n           return `${errorMessage} required`;\r\n         }\r\n     \r\n         if (!valid[field]) {\r\n           return `${errorMessage} not valid`;\r\n         }\r\n       }\r\n     \r\n       render() {\r\n         const { email, name, password, errors } = this.state;\r\n     \r\n         \r\n   return (  \r\n       <>*/\n\n  /*<div className=\"modal fade bs-example-modal-lg\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"myLargeModalLabel\">\r\n      <div className=\"modal-dialog modal-lg\" role=\"document\">\r\n          <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n              <button\r\n              type=\"button\"\r\n              className=\"close\"\r\n              data-dismiss=\"modal\"\r\n              aria-label=\"Close\"\r\n              >\r\n              <span aria-hidden=\"true\">\r\n                  <i className=\"fa fa-close\" />\r\n              </span>\r\n              </button>\r\n              <h4 className=\"modal-title\" id=\"myLargeModalLabel\">\r\n              Registrarse\r\n              </h4>\r\n              <form className=\"lg-frm\" style={{ padding: 25 }} onSubmit={this.handleSubmi}>\r\n              <label>Nombre :</label>\r\n              <input\r\n                  type=\"text\"\r\n                  value = {name}\r\n                  className={this.hasError('name') ? 'error' : ''}\r\n                  placeholder=\"Introduzca su nombre\"\r\n                  name=\"name\"\r\n                  onChange={this.handleChange}\r\n                  onBlur={this.handleBlur}\r\n              />\r\n              <p className={this.hasError('name') ? 'error-message__visible' : 'error-message'}>\r\n                  {this.displayError('name')}\r\n              </p>\r\n              \r\n              <br/>\r\n                <label>Email :</label>\r\n              <input\r\n                  type=\"email\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Introduzca su email\"\r\n                  name=\"email\"\r\n                  //value={state.email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              {!!state.error && state.error.email ? state.error.email.msg : \"\"}\r\n              <br/>\r\n                <label>Password :</label>\r\n              <input\r\n                  type=\"password\"\r\n                  className=\"form-control\"\r\n                  placeholder=\"Introduzca su password\"\r\n                  name=\"password\"\r\n                  ///value={state.password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              {!!state.error && state.error.password ? state.error.password.msg : \"\"}\r\n              <br/>\r\n              \r\n              <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-default pull-right\"\r\n                  type=\"submit\"\r\n                  value=\"Submit\"\r\n                  onClick={registrarse}\r\n              >\r\n                  Enviar\r\n              </button>\r\n              </form>\r\n          </div>\r\n          </div>\r\n      </div>\r\n  </div>\r\n  </>\r\n  );\r\n  }*/\n  constructor() {\n    super();\n    this.state = {\n      name: '',\n      email: '',\n      touched: {\n        name: false,\n        email: false\n      },\n      errors: {\n        required: {\n          name: false,\n          email: false\n        },\n        valid: {\n          email: false,\n          name: true\n        }\n      }\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    alert(\"\");\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const {\n      value,\n      name\n    } = target;\n    const errors = {\n      required: { ...this.state.errors.required,\n        [name]: false\n      }\n    };\n    this.setState({\n      [name]: value,\n      errors: { ...this.state.errors,\n        ...errors\n      }\n    });\n  }\n\n  handleBlur(event) {\n    const field = event.target.name;\n    this.setState({\n      touched: { ...this.state.touched,\n        [field]: true\n      }\n    });\n    this.validate(event);\n  }\n\n  validate(event) {\n    const target = event.target;\n    const {\n      value,\n      name\n    } = target;\n\n    if (value.length === 0) {\n      const errors = {\n        required: { ...this.state.errors.required,\n          [name]: true\n        }\n      };\n      this.setState({\n        errors: { ...this.state.errors,\n          ...errors\n        }\n      });\n      return;\n    }\n\n    if (name === 'email') {\n      this.validateEmail(value);\n    }\n  }\n\n  validateEmail(email) {\n    const emailIsValid = EMAIL_REGEX.test(this.state.email);\n    const errors = {\n      valid: { ...this.state.errors.valid,\n        email: emailIsValid\n      }\n    };\n    this.setState({\n      errors: { ...this.state.errors,\n        ...errors\n      }\n    });\n  }\n\n  hasError(field) {\n    return (this.state.errors.required[field] || !this.state.errors.valid[field]) && this.state.touched[field];\n  }\n\n  isFormInvalid() {\n    const {\n      email,\n      name,\n      errors\n    } = this.state;\n    const {\n      required,\n      valid\n    } = errors;\n    const isSomeFieldRequired = Object.keys(required).some(error => required[error]);\n    const isSomeFieldInvalid = Object.keys(valid).some(error => !valid[error]);\n    return isSomeFieldInvalid || isSomeFieldRequired;\n  }\n\n  displayError(field) {\n    const {\n      required,\n      valid\n    } = this.state.errors;\n    const errorMessage = `Field ${field} is `;\n\n    if (required[field]) {\n      return `${errorMessage} required`;\n    }\n\n    if (!valid[field]) {\n      return `${errorMessage} not valid`;\n    }\n  }\n\n  render() {\n    const {\n      email,\n      name,\n      errors\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Get in touch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Fill the fields below and we will get in touch as soon as possible!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"First Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: name,\n            onChange: this.handleChange,\n            onBlur: this.handleBlur,\n            className: this.hasError('name') ? 'error' : '',\n            name: \"name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: this.hasError('name') ? 'error-message__visible' : 'error-message',\n            children: this.displayError('name')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: email,\n            onChange: this.handleChange,\n            onBlur: this.handleBlur,\n            className: this.hasError('email') ? 'error' : '',\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: this.hasError('email') ? 'error-message__visible' : 'error-message',\n            children: this.displayError('email')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"submit-button-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: this.isFormInvalid(),\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["D:/ProyectosArian/final-zombiz/src/components/Register.js"],"names":["useEffect","useState","React","EMAIL_REGEX","RegExp","Register","Component","constructor","state","name","email","touched","errors","required","valid","handleSubmit","bind","handleChange","handleBlur","event","preventDefault","alert","target","value","setState","field","validate","length","validateEmail","emailIsValid","test","hasError","isFormInvalid","isSomeFieldRequired","Object","keys","some","error","isSomeFieldInvalid","displayError","errorMessage","render"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nimport React from \"react\";\r\n\r\nconst EMAIL_REGEX = new RegExp(/^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i);\r\n\r\n//const Register = () => {\r\n\r\nclass Register extends React.Component {\r\n\r\n    /*const [name, setName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    const [state, setState] = useState ({\r\n        nombre : '',\r\n        email : '',\r\n        password : '',\r\n        error : null,\r\n        \r\n    })\r\n\r\n    const registrarse = async () => {\r\n        let item = {name,password,email}\r\n        let data = await fetch(`http://localhost:5000/register`,{\r\n            'method':'POST',\r\n            headers : {\r\n            'Content-Type':'application/json',\r\n            \"Accept\" :'application/json' \r\n            },\r\n        body:JSON.stringify(item)\r\n        })\r\n        if(data.ok){\r\n            let datos = await data.json();\r\n            console.log(datos)\r\n            localStorage.clear();\r\n            window.location.href = '/';\r\n        }\r\n    }\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault ();\r\n        console.log(\"Enviando formulario\");\r\n        let hasError = false\r\n        if(e.target.nombre.value === \"\") { \r\n            setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    error: {\r\n                        ...prevState.error,\r\n                        nombre:{\r\n                            msg : \"Por favor, introduzca su username\",\r\n                        } \r\n                    }\r\n                }    \r\n            })\r\n            hasError = true;\r\n        } else {\r\n            setState(prevState => {\r\n                delete prevState.error?.nombre;\r\n                return {\r\n                    ...prevState, \r\n                }\r\n            })\r\n        } \r\n        if(e.target.email.value === \"\") { \r\n            setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    error: {\r\n                        ...prevState.error,\r\n                        email:{\r\n                            msg : 'Por favor, introduzca su email',\r\n                        } \r\n                    }\r\n                }    \r\n            })\r\n            hasError = true;\r\n        } else {\r\n            setState(prevState => {\r\n                delete prevState.error?.nombre;\r\n                return {\r\n                    ...prevState, \r\n                }\r\n            })\r\n        } \r\n        if (e.target.password.value === \"\") {\r\n            setState(prevState => {\r\n                return {\r\n                    ...prevState,\r\n                    error: {\r\n                        ...prevState.error,\r\n                        password:{\r\n                            msg : 'Por favor, introduzca su password',\r\n                        } \r\n                    }\r\n                }    \r\n            })\r\n            hasError = true;\r\n        } else {\r\n            setState(prevState => {\r\n                delete prevState.error?.password;\r\n                return {\r\n                    ...prevState, \r\n                }\r\n            })\r\n        } \r\n        \r\n        /*if (!hasError == false){ \r\n            console.log(\"tengo error\")\r\n\r\n            return;\r\n        }*/\r\n        //if (hasError) return;\r\n    //}   \r\n\r\n    /*return (  \r\n        <>*/\r\n          \r\n            /*<div className=\"modal fade bs-example-modal-lg\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"myLargeModalLabel\">\r\n                <div className=\"modal-dialog modal-lg\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <button\r\n                        type=\"button\"\r\n                        className=\"close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        >\r\n                        <span aria-hidden=\"true\">\r\n                            <i className=\"fa fa-close\" />\r\n                        </span>\r\n                        </button>\r\n                        <h4 className=\"modal-title\" id=\"myLargeModalLabel\">\r\n                        Registrarse\r\n                        </h4>\r\n                        <form className=\"lg-frm\" style={{ padding: 25 }} onSubmit={onSubmit}>\r\n                        <label>Nombre :</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Introduzca su nombre\"\r\n                            name=\"nombre\"\r\n                            //value={state.nombre}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        />\r\n                        {!!state.error && state.error.nombre ? state.error.nombre.msg : \"\"}\r\n                        <br/>\r\n\r\n                        <label>Email :</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Introduzca su email\"\r\n                            name=\"email\"\r\n                            //value={state.email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                        {!!state.error && state.error.email ? state.error.email.msg : \"\"}\r\n                        <br/>\r\n\r\n                        <label>Password :</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Introduzca su password\"\r\n                            name=\"password\"\r\n                            ///value={state.password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                        {!!state.error && state.error.password ? state.error.password.msg : \"\"}\r\n                        <br/>\r\n                        \r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-default pull-right\"\r\n                            type=\"submit\"\r\n                            value=\"Submit\"\r\n                            onClick={registrarse}\r\n                        >\r\n                            Enviar\r\n                        </button>\r\n                        </form>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    );*/\r\n\r\n\r\n   /* constructor() {\r\n        super();\r\n        this.state = {\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        touched: {\r\n            name: false,\r\n            email: false,\r\n            password: false\r\n        },\r\n        errors: {\r\n            required: {\r\n            name: false,\r\n            email: false,\r\n            password: false\r\n            },\r\n            valid: {\r\n            email: false,\r\n            name: true,\r\n            password: true\r\n            }\r\n        }\r\n        };\r\n    \r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleBlur = this.handleBlur.bind(this);\r\n    }\r\n      \r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n    }\r\n      \r\n        handleChange(event) {\r\n          const target = event.target;\r\n          const { value, name } = target;\r\n          const errors = {\r\n            required: { ...this.state.errors.required, [name]: false }\r\n          };\r\n          this.setState({\r\n            [name]: value,\r\n            errors: { ...this.state.errors, ...errors }\r\n          });\r\n        }\r\n      \r\n        handleBlur(event) {\r\n          const field = event.target.name;\r\n          this.setState({\r\n            touched: { ...this.state.touched, [field]: true }\r\n          });\r\n          this.validate(event);\r\n        }\r\n      \r\n        validate(event) {\r\n          const target = event.target;\r\n          const { value, name } = target;\r\n      \r\n          if (value.length === 0) {\r\n            const errors = {\r\n              required: { ...this.state.errors.required, [name]: true }\r\n            };\r\n      \r\n            this.setState({\r\n              errors: { ...this.state.errors, ...errors }\r\n            });\r\n            return;\r\n          }\r\n      \r\n          if (name === 'email') {\r\n            this.validateEmail(value);\r\n          }\r\n        }\r\n      \r\n        validateEmail(email) {\r\n          const emailIsValid = EMAIL_REGEX.test(this.state.email);\r\n          const errors = {\r\n            valid: { ...this.state.errors.valid, email: emailIsValid }\r\n          };\r\n      \r\n          this.setState({\r\n            errors: { ...this.state.errors, ...errors }\r\n          });\r\n        }\r\n      \r\n        hasError(field) {\r\n          return (this.state.errors.required[field] || !this.state.errors.valid[field]) && this.state.touched[field];\r\n        }\r\n      \r\n        isFormInvalid() {\r\n          const { email, name, errors } = this.state;\r\n          const { required, valid } = errors;\r\n          const isSomeFieldRequired = Object.keys(required).some(error => required[error]);\r\n          const isSomeFieldInvalid = Object.keys(valid).some(error => !valid[error]);\r\n      \r\n          return isSomeFieldInvalid || isSomeFieldRequired;\r\n        }\r\n      \r\n        displayError(field) {\r\n          const { required, valid } = this.state.errors;\r\n          const errorMessage = `Field ${field} is `;\r\n      \r\n          if (required[field]) {\r\n            return `${errorMessage} required`;\r\n          }\r\n      \r\n          if (!valid[field]) {\r\n            return `${errorMessage} not valid`;\r\n          }\r\n        }\r\n      \r\n        render() {\r\n          const { email, name, password, errors } = this.state;\r\n      \r\n          \r\n    return (  \r\n        <>*/\r\n           \r\n            /*<div className=\"modal fade bs-example-modal-lg\" tabIndex={-1} role=\"dialog\" aria-labelledby=\"myLargeModalLabel\">\r\n                <div className=\"modal-dialog modal-lg\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <button\r\n                        type=\"button\"\r\n                        className=\"close\"\r\n                        data-dismiss=\"modal\"\r\n                        aria-label=\"Close\"\r\n                        >\r\n                        <span aria-hidden=\"true\">\r\n                            <i className=\"fa fa-close\" />\r\n                        </span>\r\n                        </button>\r\n                        <h4 className=\"modal-title\" id=\"myLargeModalLabel\">\r\n                        Registrarse\r\n                        </h4>\r\n                        <form className=\"lg-frm\" style={{ padding: 25 }} onSubmit={this.handleSubmi}>\r\n                        <label>Nombre :</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            value = {name}\r\n                            className={this.hasError('name') ? 'error' : ''}\r\n                            placeholder=\"Introduzca su nombre\"\r\n                            name=\"name\"\r\n                            onChange={this.handleChange}\r\n                            onBlur={this.handleBlur}\r\n                        />\r\n                        <p className={this.hasError('name') ? 'error-message__visible' : 'error-message'}>\r\n                            {this.displayError('name')}\r\n                        </p>\r\n                        \r\n                        <br/>\r\n\r\n                        <label>Email :</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Introduzca su email\"\r\n                            name=\"email\"\r\n                            //value={state.email}\r\n                            onChange={(e) => setEmail(e.target.value)}\r\n                        />\r\n                        {!!state.error && state.error.email ? state.error.email.msg : \"\"}\r\n                        <br/>\r\n\r\n                        <label>Password :</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Introduzca su password\"\r\n                            name=\"password\"\r\n                            ///value={state.password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        />\r\n                        {!!state.error && state.error.password ? state.error.password.msg : \"\"}\r\n                        <br/>\r\n                        \r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-default pull-right\"\r\n                            type=\"submit\"\r\n                            value=\"Submit\"\r\n                            onClick={registrarse}\r\n                        >\r\n                            Enviar\r\n                        </button>\r\n                        </form>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n\r\n    );\r\n}*/\r\n\r\n\r\n\r\nconstructor() {\r\n    super();\r\n    this.state = {\r\n      name: '',\r\n      email: '',\r\n      touched: {\r\n        name: false,\r\n        email: false\r\n      },\r\n      errors: {\r\n        required: {\r\n          name: false,\r\n          email: false\r\n        },\r\n        valid: {\r\n          email: false,\r\n          name: true\r\n        }\r\n      }\r\n    };\r\n\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    alert(\"\")\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const { value, name } = target;\r\n    const errors = {\r\n      required: { ...this.state.errors.required, [name]: false }\r\n    };\r\n    this.setState({\r\n      [name]: value,\r\n      errors: { ...this.state.errors, ...errors }\r\n    });\r\n  }\r\n\r\n  handleBlur(event) {\r\n    const field = event.target.name;\r\n    this.setState({\r\n      touched: { ...this.state.touched, [field]: true }\r\n    });\r\n    this.validate(event);\r\n  }\r\n\r\n  validate(event) {\r\n    const target = event.target;\r\n    const { value, name } = target;\r\n\r\n    if (value.length === 0) {\r\n      const errors = {\r\n        required: { ...this.state.errors.required, [name]: true }\r\n      };\r\n\r\n      this.setState({\r\n        errors: { ...this.state.errors, ...errors }\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (name === 'email') {\r\n      this.validateEmail(value);\r\n    }\r\n  }\r\n\r\n  validateEmail(email) {\r\n    const emailIsValid = EMAIL_REGEX.test(this.state.email);\r\n    const errors = {\r\n      valid: { ...this.state.errors.valid, email: emailIsValid }\r\n    };\r\n\r\n    this.setState({\r\n      errors: { ...this.state.errors, ...errors }\r\n    });\r\n  }\r\n\r\n  hasError(field) {\r\n    return (this.state.errors.required[field] || !this.state.errors.valid[field]) && this.state.touched[field];\r\n  }\r\n\r\n  isFormInvalid() {\r\n    const { email, name, errors } = this.state;\r\n    const { required, valid } = errors;\r\n    const isSomeFieldRequired = Object.keys(required).some(error => required[error]);\r\n    const isSomeFieldInvalid = Object.keys(valid).some(error => !valid[error]);\r\n\r\n    return isSomeFieldInvalid || isSomeFieldRequired;\r\n  }\r\n\r\n  displayError(field) {\r\n    const { required, valid } = this.state.errors;\r\n    const errorMessage = `Field ${field} is `;\r\n\r\n    if (required[field]) {\r\n      return `${errorMessage} required`;\r\n    }\r\n\r\n    if (!valid[field]) {\r\n      return `${errorMessage} not valid`;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { email, name, errors } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h1>Get in touch</h1>\r\n        <p>\r\n          Fill the fields below and we will get in touch as soon as possible!!\r\n        </p>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"row-input\">\r\n            <label>First Name</label>\r\n            <input type=\"text\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              onBlur={this.handleBlur}\r\n              className={this.hasError('name') ? 'error' : ''}\r\n              name=\"name\" />\r\n            <p className={this.hasError('name') ? 'error-message__visible' : 'error-message'}>\r\n              {this.displayError('name')}\r\n            </p>\r\n          </div>\r\n          <div className=\"row-input\">\r\n            <label>Email</label>\r\n            <input type=\"text\"\r\n              value={email}\r\n              onChange={this.handleChange}\r\n              onBlur={this.handleBlur}\r\n              className={this.hasError('email') ? 'error' : ''}\r\n              name=\"email\" />\r\n            <p className={this.hasError('email') ? 'error-message__visible' : 'error-message'}>\r\n              {this.displayError('email')}\r\n            </p>\r\n          </div>\r\n          <div className=\"submit-button-container\">\r\n            <button\r\n              type=\"submit\"\r\n              disabled={this.isFormInvalid()}>\r\n              Send\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Register;"]},"metadata":{},"sourceType":"module"}