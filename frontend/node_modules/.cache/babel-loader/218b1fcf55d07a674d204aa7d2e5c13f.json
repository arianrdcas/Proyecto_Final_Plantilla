{"ast":null,"code":"const getState = _ref => {\n  let {\n    getStore,\n    getActions,\n    setStore\n  } = _ref;\n  return {\n    store: {\n      name: \"\",\n      emailuser: \"\",\n      password: \"\",\n      error: null,\n      isAuth: false,\n      proyecto: \"\",\n      descripcion: \"\",\n      autor: \"\",\n      currentUser: [],\n      profile: null\n    },\n    actions: {\n      isAuthenticated: () => {\n        //console.log(\"verificanco usuario\");\n        if (sessionStorage.getItem(\"isAuth\")) {\n          setStore({\n            isAuth: sessionStorage.getItem(\"isAuth\"),\n            currentUser: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n          });\n        }\n      },\n      register: () => {\n        const {\n          name,\n          emailuser,\n          password\n        } = getStore();\n        const dataUser = {\n          name: name,\n          emailuser: emailuser,\n          password: password\n        };\n        console.log(dataUser);\n        /* fetch(\"http://127.0.0.1:5000/api/users/register\", {\r\n          method: 'POST',\r\n          body: JSON.stringify(dataUser), \r\n          headers: { \"Content-type\": \"application/json\" }\r\n        })\r\n          .then((resp) => resp.json())\r\n          .then((response) => console.log(response))\r\n          .catch((error) => console.error(error)); */\n      },\n      handleChange: e => {\n        setStore({\n          [e.target.name]: e.target.value\n        });\n      },\n      handleLogin: async e => {\n        e.preventDefault();\n\n        try {\n          const {\n            name,\n            password\n          } = getStore();\n          const datos = {\n            name: name,\n            password: password\n          };\n          console.log(datos);\n          const resp = await fetch(\"http://127.0.0.1:5000/api/users/login\", {\n            method: \"POST\",\n            body: JSON.stringify(datos),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          const infoUser = await resp.json();\n\n          if (infoUser.msg) {\n            setStore({\n              password: \"\",\n              error: infoUser.msg\n            });\n          } else {\n            setStore({\n              nombre: \"\",\n              password: \"\",\n              error: null,\n              currentUser: infoUser,\n              isAuth: true\n            });\n            sessionStorage.setItem('isAuth', true);\n            sessionStorage.setItem('currentUser', JSON.stringify(infoUser)); //history.push(\"/\");\n          }\n        } catch (error) {\n          setStore({\n            error: error.message\n          });\n        }\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"sources":["D:/ProyectosArian/Trabajo_Final_agosto/frontend/src/store/flux.js"],"names":["getState","getStore","getActions","setStore","store","name","emailuser","password","error","isAuth","proyecto","descripcion","autor","currentUser","profile","actions","isAuthenticated","sessionStorage","getItem","JSON","parse","register","dataUser","console","log","handleChange","e","target","value","handleLogin","preventDefault","datos","resp","fetch","method","body","stringify","headers","infoUser","json","msg","nombre","setItem","message"],"mappings":"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","sourcesContent":["const getState = ({ getStore, getActions, setStore }) => {\r\n  return {\r\n    store: {\r\n      name: \"\",\r\n      emailuser: \"\",\r\n      password: \"\",\r\n      error: null,\r\n      isAuth: false,\r\n      proyecto: \"\",\r\n      descripcion: \"\",\r\n      autor: \"\",\r\n      currentUser: [],\r\n      profile: null,\r\n    },\r\n\r\n    actions: {\r\n      isAuthenticated: () => {\r\n        //console.log(\"verificanco usuario\");\r\n        if (sessionStorage.getItem(\"isAuth\")) {\r\n          setStore({\r\n            isAuth: sessionStorage.getItem(\"isAuth\"),\r\n            currentUser: JSON.parse(sessionStorage.getItem(\"currentUser\")),\r\n          });\r\n        }\r\n      },\r\n\r\n      register: () => {\r\n        const { name, emailuser, password } = getStore();\r\n        const dataUser={name: name, emailuser: emailuser, password: password}\r\n        console.log(dataUser)\r\n        /* fetch(\"http://127.0.0.1:5000/api/users/register\", {\r\n          method: 'POST',\r\n          body: JSON.stringify(dataUser), \r\n          headers: { \"Content-type\": \"application/json\" }\r\n        })\r\n          .then((resp) => resp.json())\r\n          .then((response) => console.log(response))\r\n          .catch((error) => console.error(error)); */\r\n      },\r\n\r\n      handleChange: (e) => {\r\n        setStore({\r\n          [e.target.name]: e.target.value,\r\n        });\r\n      },\r\n\r\n      handleLogin: async (e) => {\r\n        e.preventDefault();\r\n        try{\r\n            const { name, password } = getStore();\r\n            const datos = { name: name, password: password };\r\n            console.log(datos)\r\n            const resp = await fetch(\"http://127.0.0.1:5000/api/users/login\", {\r\n                method: \"POST\",\r\n                body: JSON.stringify(datos),\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n            },\r\n        }); \r\n            const infoUser = await resp.json();\r\n            if (infoUser.msg) {\r\n                setStore({\r\n                password: \"\",\r\n                error: infoUser.msg,\r\n                });\r\n            } else {\r\n                setStore({\r\n                nombre: \"\",\r\n                password: \"\",\r\n                error: null,\r\n                currentUser: infoUser,\r\n                isAuth: true,\r\n                });\r\n                sessionStorage.setItem('isAuth', true);\r\n                sessionStorage.setItem('currentUser', JSON.stringify(infoUser));\r\n                //history.push(\"/\");\r\n            }\r\n        } catch (error) {\r\n        setStore({\r\n          error: error.message\r\n        });\r\n      }\r\n    }\r\n\r\n    }\r\n};\r\n};\r\n\r\nexport default getState;\r\n"]},"metadata":{},"sourceType":"module"}