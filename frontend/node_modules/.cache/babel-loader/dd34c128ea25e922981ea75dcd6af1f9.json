{"ast":null,"code":"const getState = _ref => {\n  let {\n    getStore,\n    getActions,\n    setStore\n  } = _ref;\n  return {\n    store: {\n      name: \"\",\n      emailuser: \"\",\n      password: \"\",\n      error: null,\n      isAuth: false,\n      nombre: \"\",\n      descripcion: \"\",\n      autor: \"\",\n      value: null,\n      currentUser: [],\n      profile: null,\n      proyectos: [],\n      modal: false\n    },\n    actions: {\n      isAuthenticated: () => {\n        if (sessionStorage.getItem(\"isAuth\")) {\n          setStore({\n            isAuth: sessionStorage.getItem(\"isAuth\"),\n            currentUser: JSON.parse(sessionStorage.getItem(\"currentUser\"))\n          });\n        }\n      },\n      registro: () => {\n        setStore({\n          modal: true\n        });\n      },\n      register: (e, history) => {\n        e.preventDefault();\n        const {\n          name,\n          emailuser,\n          password\n        } = getStore();\n        const dataUser = {\n          name: name,\n          emailuser: emailuser,\n          password: password\n        };\n        console.log(dataUser);\n        fetch(\"http://127.0.0.1:5000/api/users/register\", {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(dataUser)\n        }).then(resp => resp.json()).then(response => console.log(response)).catch(error => console.error(error));\n        e.target.reset();\n        history.push(\"/\");\n      },\n      handleChange: e => {\n        setStore({\n          [e.target.name]: e.target.value\n        });\n      },\n      handleLogin: async (e, history) => {\n        e.preventDefault();\n\n        try {\n          const {\n            name,\n            password\n          } = getStore();\n          const datos = {\n            name: name,\n            password: password\n          }; //console.log(datos);\n\n          const resp = await fetch(\"http://127.0.0.1:5000/api/users/login\", {\n            method: \"POST\",\n            body: JSON.stringify(datos),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            }\n          });\n          const infoUser = await resp.json();\n\n          if (infoUser.msg) {\n            setStore({\n              password: \"\",\n              error: infoUser.msg\n            });\n          } else {\n            setStore({\n              nombre: \"\",\n              password: \"\",\n              error: null,\n              currentUser: infoUser,\n              isAuth: true\n            });\n            sessionStorage.setItem(\"isAuth\", true);\n            sessionStorage.setItem(\"currentUser\", JSON.stringify(infoUser));\n            history.push('/');\n          }\n        } catch (error) {\n          setStore({\n            error: error.message\n          });\n        }\n\n        history.push('/');\n      },\n      insertarProyecto: (e, history) => {\n        e.preventDefault();\n        const {\n          nombre,\n          descripcion,\n          autor\n        } = getStore();\n        const dataForm = {\n          nombre: nombre,\n          descripcion: descripcion,\n          autor: autor\n        };\n        console.log(dataForm);\n        fetch(\"http://127.0.0.1:5000/api/proyectos/register\", {\n          method: \"POST\",\n          body: JSON.stringify(dataForm),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        }).then(resp => resp.json()).then(response => console.log(response)).then(response => {\n          console.log(response);\n          setStore({\n            nombre: \"\",\n            descripcion: \"\",\n            autor: \"\",\n            modal: true\n          });\n        }).catch(error => console.error(error));\n      },\n      irListadoProyecto: (e, history) => {\n        setStore({\n          modal: false\n        });\n        history.push(\"/verproyecto\");\n      },\n      fetchProyecto: () => {\n        fetch(\"http://127.0.0.1:5000/api/proyectos\", {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(resp => resp.json()).then(response => {\n          setStore({\n            proyectos: response\n          });\n        }).catch(error => console.log(error));\n      },\n      fetchOneProyecto: id => {\n        var idproyect = id;\n        fetch(`http://127.0.0.1:5000/api/proyecto/${idproyect}`, {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }).then(resp => resp.json()).then(response => {\n          setStore({\n            proyectos: response,\n            nombre: response[0].nombre,\n            descripcion: response[0].descripcion,\n            autor: response[0].autor\n          });\n        }).catch(error => console.log(error));\n      },\n      logout: history => {\n        sessionStorage.clear();\n        setStore({\n          isAuth: false,\n          currentUser: []\n        });\n        history.push(\"/\");\n      },\n      delete_proyecto: id => {\n        var idproyect = parseInt(id);\n        fetch(`http://127.0.0.1:5000/api/proyectos/delete/${idproyect}`, {\n          method: 'DELETE'\n        }).then(result => {\n          result.json();\n          setStore({\n            modal: true\n          }).then(resp => {\n            console.warn(resp);\n          });\n        });\n      },\n      editar_proyecto: (e, id, history) => {\n        console.log(\"estoy en flux\");\n        e.preventDefault();\n        var idproyect = parseInt(id);\n        const {\n          nombre,\n          descripcion,\n          autor\n        } = getStore();\n        const dataFormUpdate = {\n          nombre: nombre,\n          descripcion: descripcion,\n          autor: autor\n        };\n        console.log(dataFormUpdate);\n        fetch(`http://127.0.0.1:5000/api/proyectos/editar/${idproyect}`, {\n          method: \"PUT\",\n          body: JSON.stringify(dataFormUpdate),\n          headers: {\n            \"Content-type\": \"application/json\"\n          }\n        }).then(resp => resp.json()).then(response => console.log(response)).catch(error => console.error(error));\n        history.push(\"/verproyecto\");\n      }\n    }\n  };\n};\n\nexport default getState;","map":{"version":3,"sources":["D:/ProyectosArian/Trabajo_Final_agosto/frontend/src/store/flux.js"],"names":["getState","getStore","getActions","setStore","store","name","emailuser","password","error","isAuth","nombre","descripcion","autor","value","currentUser","profile","proyectos","modal","actions","isAuthenticated","sessionStorage","getItem","JSON","parse","registro","register","e","history","preventDefault","dataUser","console","log","fetch","method","headers","body","stringify","then","resp","json","response","catch","target","reset","push","handleChange","handleLogin","datos","infoUser","msg","setItem","message","insertarProyecto","dataForm","irListadoProyecto","fetchProyecto","fetchOneProyecto","id","idproyect","logout","clear","delete_proyecto","parseInt","result","warn","editar_proyecto","dataFormUpdate"],"mappings":"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","sourcesContent":["const getState = ({ getStore, getActions, setStore }) => {\r\n  return {\r\n    store: {\r\n      name: \"\",\r\n      emailuser: \"\",\r\n      password: \"\",\r\n      error: null,\r\n      isAuth: false,\r\n      nombre: \"\",\r\n      descripcion: \"\",\r\n      autor: \"\",\r\n      value:null,\r\n      currentUser: [],\r\n      profile: null,\r\n      proyectos:[],\r\n      modal: false\r\n    },\r\n\r\n    actions: {\r\n      isAuthenticated: () => {\r\n        if (sessionStorage.getItem(\"isAuth\")) {\r\n          setStore({\r\n            isAuth: sessionStorage.getItem(\"isAuth\"),\r\n            currentUser: JSON.parse(sessionStorage.getItem(\"currentUser\")),\r\n          });\r\n        }\r\n      },\r\n\r\n      registro:()=>{\r\n        setStore({\r\n          modal: true,\r\n        });\r\n      },\r\n\r\n      register: (e, history) => {\r\n        e.preventDefault();\r\n        const { name, emailuser, password } = getStore();\r\n        const dataUser = {\r\n          name: name,\r\n          emailuser: emailuser,\r\n          password: password,\r\n        };\r\n        console.log(dataUser);\r\n        fetch(\"http://127.0.0.1:5000/api/users/register\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-type\": \"application/json\" },\r\n          body: JSON.stringify(dataUser),\r\n          \r\n        })\r\n          .then((resp) => resp.json())\r\n          .then((response) => console.log(response))\r\n          .catch((error) => console.error(error));\r\n          e.target.reset();\r\n          history.push(\"/\")\r\n      },\r\n\r\n      handleChange: (e) => {\r\n        setStore({\r\n          [e.target.name]: e.target.value,  \r\n        })\r\n      },\r\n\r\n      handleLogin: async (e, history) => {\r\n        e.preventDefault();\r\n        try {\r\n          const { name, password } = getStore();\r\n          const datos = { name: name, password: password };\r\n          //console.log(datos);\r\n          const resp = await fetch(\"http://127.0.0.1:5000/api/users/login\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify(datos),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          });\r\n          const infoUser = await resp.json();\r\n          if (infoUser.msg) {\r\n            setStore({\r\n              password: \"\",\r\n              error: infoUser.msg,\r\n            });\r\n          } else {\r\n            setStore({\r\n              nombre: \"\",\r\n              password: \"\",\r\n              error: null,\r\n              currentUser: infoUser,\r\n              isAuth: true,\r\n            });\r\n            sessionStorage.setItem(\"isAuth\", true);\r\n            sessionStorage.setItem(\"currentUser\", JSON.stringify(infoUser));\r\n            history.push('/')\r\n          }\r\n        } catch (error) {\r\n          setStore({\r\n            error: error.message,\r\n          });\r\n        }\r\n        history.push('/')\r\n      },\r\n\r\n      insertarProyecto: (e, history) => {\r\n        e.preventDefault();\r\n        const { nombre, descripcion, autor } = getStore();\r\n        const dataForm = {\r\n          nombre: nombre,\r\n          descripcion: descripcion,\r\n          autor: autor,\r\n        }\r\n        console.log(dataForm);\r\n        fetch(\"http://127.0.0.1:5000/api/proyectos/register\", {\r\n          method: \"POST\",\r\n          body: JSON.stringify(dataForm),\r\n          headers: { \"Content-type\": \"application/json\" },\r\n        })\r\n          .then((resp) => resp.json())\r\n          .then((response) => console.log(response))\r\n          .then((response) => {\r\n            console.log(response)\r\n            setStore({\r\n              nombre:\"\",\r\n              descripcion:\"\",\r\n              autor:\"\",\r\n              modal: true,\r\n            });\r\n          })\r\n          .catch((error) => console.error(error));    \r\n      },\r\n\r\n      irListadoProyecto:(e,history)=>{\r\n        setStore({modal:false})\r\n        history.push(\"/verproyecto\")\r\n      },\r\n\r\n      fetchProyecto: () => {\r\n        fetch(\"http://127.0.0.1:5000/api/proyectos\",{\r\n          method:'GET',\r\n          headers :{\r\n            'Content-Type' : 'application/json'\r\n          }})\r\n            .then((resp) => resp.json())\r\n            .then((response) => {\r\n              setStore({proyectos:response\r\n              })\r\n            })\r\n            .catch(error => console.log(error)); \r\n      }, \r\n\r\n      fetchOneProyecto: (id) => {\r\n        var idproyect = id\r\n        fetch(`http://127.0.0.1:5000/api/proyecto/${idproyect}`,{\r\n          method:'GET',\r\n          headers :{\r\n            'Content-Type' : 'application/json'\r\n          }})\r\n            .then((resp) => resp.json())\r\n            .then((response) => {\r\n              setStore({\r\n                proyectos:response,\r\n                nombre: response[0].nombre,\r\n                descripcion:response[0].descripcion,\r\n                autor: response[0].autor,\r\n              });\r\n            })\r\n            .catch(error => console.log(error));  \r\n      }, \r\n\r\n      logout:(history)=>{\r\n        sessionStorage.clear()\r\n        setStore({isAuth:false, currentUser:[]})\r\n        history.push(\"/\")\r\n      },\r\n      \r\n      delete_proyecto: (id) =>{\r\n        var idproyect = parseInt(id)\r\n        fetch(`http://127.0.0.1:5000/api/proyectos/delete/${idproyect}`, {\r\n          method: 'DELETE',\r\n        })\r\n        .then((result) =>{\r\n          result.json()\r\n          setStore({\r\n            modal: true,\r\n          })\r\n          .then((resp)=>{\r\n            console.warn(resp)\r\n          })\r\n        })\r\n\r\n      }, \r\n\r\n      editar_proyecto: (e, id, history) => {\r\n        console.log(\"estoy en flux\");\r\n        e.preventDefault();\r\n        var idproyect = parseInt(id)\r\n        const { nombre, descripcion, autor } = getStore();\r\n        const dataFormUpdate = {\r\n          nombre: nombre,\r\n          descripcion: descripcion,\r\n          autor: autor,\r\n        };\r\n        console.log(dataFormUpdate);\r\n        fetch(`http://127.0.0.1:5000/api/proyectos/editar/${idproyect}`, {\r\n          method: \"PUT\",\r\n          body: JSON.stringify(dataFormUpdate),\r\n          headers: { \"Content-type\": \"application/json\" },\r\n        })\r\n          .then((resp) => resp.json())\r\n          .then((response) => console.log(response))\r\n          .catch((error) => console.error(error));\r\n          history.push(\"/verproyecto\")\r\n      },\r\n      \r\n    },\r\n  };\r\n};\r\n\r\nexport default getState;"]},"metadata":{},"sourceType":"module"}